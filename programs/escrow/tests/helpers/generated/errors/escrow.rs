//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum EscrowError {
    /// 6000 - Insufficient token balance in maker's account
    #[error("Insufficient token balance in maker's account")]
    InsufficientMakerBalance = 0x1770,
    /// 6001 - Insufficient token balance in taker's account
    #[error("Insufficient token balance in taker's account")]
    InsufficientTakerBalance = 0x1771,
    /// 6002 - Invalid token mint - must be different from offered token
    #[error("Invalid token mint - must be different from offered token")]
    InvalidTokenMint = 0x1772,
    /// 6003 - Amount must be greater than zero
    #[error("Amount must be greater than zero")]
    InvalidAmount = 0x1773,
    /// 6004 - Failed to withdraw tokens from vault
    #[error("Failed to withdraw tokens from vault")]
    FailedVaultWithdrawal = 0x1774,
    /// 6005 - Failed to close vault account
    #[error("Failed to close vault account")]
    FailedVaultClosure = 0x1775,
    /// 6006 - Failed to refund tokens from vault
    #[error("Failed to refund tokens from vault")]
    FailedRefundTransfer = 0x1776,
    /// 6007 - Failed to close vault during refund
    #[error("Failed to close vault during refund")]
    FailedRefundClosure = 0x1777,
}

impl solana_program_error::PrintProgramError for EscrowError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for EscrowError {
    fn type_of() -> &'static str {
        "EscrowError"
    }
}

