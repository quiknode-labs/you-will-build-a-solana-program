//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const MAKE_OFFER_DISCRIMINATOR: [u8; 8] = [214, 98, 97, 35, 59, 12, 44, 178];

/// Accounts.
#[derive(Debug)]
pub struct MakeOffer {
      
              
          pub associated_token_program: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub maker: solana_pubkey::Pubkey,
          
              
          pub token_mint_a: solana_pubkey::Pubkey,
          
              
          pub token_mint_b: solana_pubkey::Pubkey,
          
              
          pub maker_token_account_a: solana_pubkey::Pubkey,
          
              
          pub offer: solana_pubkey::Pubkey,
          
              
          pub vault: solana_pubkey::Pubkey,
      }

impl MakeOffer {
  pub fn instruction(&self, args: MakeOfferInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: MakeOfferInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.maker,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint_a,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint_b,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.maker_token_account_a,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.offer,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.vault,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&MakeOfferInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ESCROW_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct MakeOfferInstructionData {
            discriminator: [u8; 8],
                        }

impl MakeOfferInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [214, 98, 97, 35, 59, 12, 44, 178],
                                                            }
  }
}

impl Default for MakeOfferInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct MakeOfferInstructionArgs {
                  pub id: u64,
                pub token_a_offered_amount: u64,
                pub token_b_wanted_amount: u64,
      }


/// Instruction builder for `MakeOffer`.
///
/// ### Accounts:
///
                ///   0. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
                ///   1. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
                      ///   3. `[writable, signer]` maker
          ///   4. `[]` token_mint_a
          ///   5. `[]` token_mint_b
                ///   6. `[writable]` maker_token_account_a
                ///   7. `[writable]` offer
                ///   8. `[writable]` vault
#[derive(Clone, Debug, Default)]
pub struct MakeOfferBuilder {
            associated_token_program: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                maker: Option<solana_pubkey::Pubkey>,
                token_mint_a: Option<solana_pubkey::Pubkey>,
                token_mint_b: Option<solana_pubkey::Pubkey>,
                maker_token_account_a: Option<solana_pubkey::Pubkey>,
                offer: Option<solana_pubkey::Pubkey>,
                vault: Option<solana_pubkey::Pubkey>,
                        id: Option<u64>,
                token_a_offered_amount: Option<u64>,
                token_b_wanted_amount: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl MakeOfferBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            #[inline(always)]
    pub fn maker(&mut self, maker: solana_pubkey::Pubkey) -> &mut Self {
                        self.maker = Some(maker);
                    self
    }
            #[inline(always)]
    pub fn token_mint_a(&mut self, token_mint_a: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_mint_a = Some(token_mint_a);
                    self
    }
            #[inline(always)]
    pub fn token_mint_b(&mut self, token_mint_b: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_mint_b = Some(token_mint_b);
                    self
    }
            #[inline(always)]
    pub fn maker_token_account_a(&mut self, maker_token_account_a: solana_pubkey::Pubkey) -> &mut Self {
                        self.maker_token_account_a = Some(maker_token_account_a);
                    self
    }
            #[inline(always)]
    pub fn offer(&mut self, offer: solana_pubkey::Pubkey) -> &mut Self {
                        self.offer = Some(offer);
                    self
    }
            #[inline(always)]
    pub fn vault(&mut self, vault: solana_pubkey::Pubkey) -> &mut Self {
                        self.vault = Some(vault);
                    self
    }
                    #[inline(always)]
      pub fn id(&mut self, id: u64) -> &mut Self {
        self.id = Some(id);
        self
      }
                #[inline(always)]
      pub fn token_a_offered_amount(&mut self, token_a_offered_amount: u64) -> &mut Self {
        self.token_a_offered_amount = Some(token_a_offered_amount);
        self
      }
                #[inline(always)]
      pub fn token_b_wanted_amount(&mut self, token_b_wanted_amount: u64) -> &mut Self {
        self.token_b_wanted_amount = Some(token_b_wanted_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = MakeOffer {
                              associated_token_program: self.associated_token_program.unwrap_or(solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        maker: self.maker.expect("maker is not set"),
                                        token_mint_a: self.token_mint_a.expect("token_mint_a is not set"),
                                        token_mint_b: self.token_mint_b.expect("token_mint_b is not set"),
                                        maker_token_account_a: self.maker_token_account_a.expect("maker_token_account_a is not set"),
                                        offer: self.offer.expect("offer is not set"),
                                        vault: self.vault.expect("vault is not set"),
                      };
          let args = MakeOfferInstructionArgs {
                                                              id: self.id.clone().expect("id is not set"),
                                                                  token_a_offered_amount: self.token_a_offered_amount.clone().expect("token_a_offered_amount is not set"),
                                                                  token_b_wanted_amount: self.token_b_wanted_amount.clone().expect("token_b_wanted_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `make_offer` CPI accounts.
  pub struct MakeOfferCpiAccounts<'a, 'b> {
          
                    
              pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub maker: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_mint_a: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_mint_b: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub maker_token_account_a: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub offer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub vault: &'b solana_account_info::AccountInfo<'a>,
            }

/// `make_offer` CPI instruction.
pub struct MakeOfferCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub maker: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_mint_a: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_mint_b: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub maker_token_account_a: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub offer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub vault: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: MakeOfferInstructionArgs,
  }

impl<'a, 'b> MakeOfferCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: MakeOfferCpiAccounts<'a, 'b>,
              args: MakeOfferInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              associated_token_program: accounts.associated_token_program,
              token_program: accounts.token_program,
              system_program: accounts.system_program,
              maker: accounts.maker,
              token_mint_a: accounts.token_mint_a,
              token_mint_b: accounts.token_mint_b,
              maker_token_account_a: accounts.maker_token_account_a,
              offer: accounts.offer,
              vault: accounts.vault,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.maker.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint_a.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint_b.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.maker_token_account_a.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.offer.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.vault.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&MakeOfferInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ESCROW_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.maker.clone());
                        account_infos.push(self.token_mint_a.clone());
                        account_infos.push(self.token_mint_b.clone());
                        account_infos.push(self.maker_token_account_a.clone());
                        account_infos.push(self.offer.clone());
                        account_infos.push(self.vault.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `MakeOffer` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` associated_token_program
          ///   1. `[]` token_program
          ///   2. `[]` system_program
                      ///   3. `[writable, signer]` maker
          ///   4. `[]` token_mint_a
          ///   5. `[]` token_mint_b
                ///   6. `[writable]` maker_token_account_a
                ///   7. `[writable]` offer
                ///   8. `[writable]` vault
#[derive(Clone, Debug)]
pub struct MakeOfferCpiBuilder<'a, 'b> {
  instruction: Box<MakeOfferCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MakeOfferCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(MakeOfferCpiBuilderInstruction {
      __program: program,
              associated_token_program: None,
              token_program: None,
              system_program: None,
              maker: None,
              token_mint_a: None,
              token_mint_b: None,
              maker_token_account_a: None,
              offer: None,
              vault: None,
                                            id: None,
                                token_a_offered_amount: None,
                                token_b_wanted_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.maker = Some(maker);
                    self
    }
      #[inline(always)]
    pub fn token_mint_a(&mut self, token_mint_a: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint_a = Some(token_mint_a);
                    self
    }
      #[inline(always)]
    pub fn token_mint_b(&mut self, token_mint_b: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint_b = Some(token_mint_b);
                    self
    }
      #[inline(always)]
    pub fn maker_token_account_a(&mut self, maker_token_account_a: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.maker_token_account_a = Some(maker_token_account_a);
                    self
    }
      #[inline(always)]
    pub fn offer(&mut self, offer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.offer = Some(offer);
                    self
    }
      #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.vault = Some(vault);
                    self
    }
                    #[inline(always)]
      pub fn id(&mut self, id: u64) -> &mut Self {
        self.instruction.id = Some(id);
        self
      }
                #[inline(always)]
      pub fn token_a_offered_amount(&mut self, token_a_offered_amount: u64) -> &mut Self {
        self.instruction.token_a_offered_amount = Some(token_a_offered_amount);
        self
      }
                #[inline(always)]
      pub fn token_b_wanted_amount(&mut self, token_b_wanted_amount: u64) -> &mut Self {
        self.instruction.token_b_wanted_amount = Some(token_b_wanted_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = MakeOfferInstructionArgs {
                                                              id: self.instruction.id.clone().expect("id is not set"),
                                                                  token_a_offered_amount: self.instruction.token_a_offered_amount.clone().expect("token_a_offered_amount is not set"),
                                                                  token_b_wanted_amount: self.instruction.token_b_wanted_amount.clone().expect("token_b_wanted_amount is not set"),
                                    };
        let instruction = MakeOfferCpi {
        __program: self.instruction.__program,
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          maker: self.instruction.maker.expect("maker is not set"),
                  
          token_mint_a: self.instruction.token_mint_a.expect("token_mint_a is not set"),
                  
          token_mint_b: self.instruction.token_mint_b.expect("token_mint_b is not set"),
                  
          maker_token_account_a: self.instruction.maker_token_account_a.expect("maker_token_account_a is not set"),
                  
          offer: self.instruction.offer.expect("offer is not set"),
                  
          vault: self.instruction.vault.expect("vault is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct MakeOfferCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                maker: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_mint_a: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_mint_b: Option<&'b solana_account_info::AccountInfo<'a>>,
                maker_token_account_a: Option<&'b solana_account_info::AccountInfo<'a>>,
                offer: Option<&'b solana_account_info::AccountInfo<'a>>,
                vault: Option<&'b solana_account_info::AccountInfo<'a>>,
                        id: Option<u64>,
                token_a_offered_amount: Option<u64>,
                token_b_wanted_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

